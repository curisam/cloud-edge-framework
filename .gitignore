# byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]

#---------------
# jpark
#---------------
**/.DS_Store
**/.*.swp
**/wandb/
**/results/

!.gitignore

doc/evc.html

# model
*.onnx

**/data/
**/dataset/
**/tmp/
**/tmp.0/
**/tmp.1/
**/tmp.2/
**/tmp.3/
**/tmp.4/
**/tmp.5/

v2/doc/figures
v2/approaches/flwr01/env
v2/approaches/flwr01/env/

# 모든 위치의 아래 폴더는 무시 
**/checkpoints/
**/checkpoint/
**/dataset/
**/data/
**/keynote/
**/tmp/
**/_tmp/
**/__tmp/
**/wandb/
**/venv/
**/.ipynb_checkpoints/
**/flagged/
**/video_crafter/
**/client/

evc/demo

# model
*.onnx

# 모든 위치의 아래 폴더는 무시 
**/checkpoint/
#**/dataset/
**/tmp/

.ipynb_checkpoints
.ipynb_checkpoints/*
*/.ipynb_checkpoints/*

# C extensions
*.so

# tests and coverage
*.pytest_cache
.coverage

# database & logs
*.db
*.sqlite3
*.log

# venv
env
venv

# sphinx docs 
_build
_static
_templates

# javascript
.vscode/symbols.json


##---------------------------------------------------------
## 참고주소 : https://nochoco-lee.tistory.com/46
## JPark 수정
##---------------------------------------------------------

# # 로 시작하는 줄은 주석 입니다.

# 'myfile.ext' 파일을 ignore 합니다.
myfile.ext

# ignore 규칙을 정의하는 줄에 주석을 함께 섞어 쓰지 않습니다.
# 아래는 의도와는 다르게 'myfile.ext # not a comment' 라는 이름의 파일을 ignore 합니다.
myfile.ext # not a comment

# 전체 경로를 통해 특정 파일을 ignore 처리하는 예시입니다.
# 파일명만 쓴 규칙은 .gitignore 파일이 위치하는 최상위 디렉토리뿐만 아니라 모든 서브디렉토리에 동일하게 적용됩니다.
# 아래의 예시에서 dir/otherdir/file.ext 만 ignore 합니다.
dir/otherdir/file.ext 
# otherfile.ext 파일은 모든 하부 디렉토리에서 ignore 합니다.
otherfile.ext

# 디렉토리 전체를 ignore 합니다.
# 디렉토리 자체와 디렉토리 내의 모든 파일들을 ignore 합니다.
mybin/

# Glob 패턴 형식을 사용하여 특정 문자를 포함하는 경로를 ignore 합니다.
# 일례로 아래의 규칙은 build/ 와 Build/ 두가지 경로 모두를 ignore 합니다.
[bB]uild/

# / 로 끝나지 않는 경로의 경우에는, 해당 규칙이 기술된 이름을 갖는 파일과 디렉토리 모두를 ignore 합니다.
# 따라서, 아래는 
# `mygen` 이라는 이름을 가진 파일과,
# `mygen` 이라는 이름을 가진 디렉토리 및 해당 디렉토리의 모든 파일들을 ignore 합니다.
mygen

# 파일을 확장자 별로 ignore 합니다.
# 아래 기술된 확장자를 갖는 현재 디렉토리와 모든 서브디렉토리 내의 파일들을 ignore 합니다.
*.apk
*.class

# 특정 디렉토리 지정과 특정 확장자 지정 규칙이 서로 중복되어도 동작합니다.
# 아래와
*.apk
*.class
# 아래처럼 반복해도 동작합니다.
myjava/*.apk
mygen/*.class

# 최상위 디렉토리에 존재하는 파일을 ignore 처리하되,
# 서브디렉토리 내의 동일한 이름을 갖는 파일들은 제외하고 싶다면 `/` 를 앞에 붙입니다.
/*.apk
/*.class

# DirectoryA 라는 이름의 디렉토리가 저장소 내 어떤 위치에 존재하던
# 모두 ignore 처리하고 싶다면 ** 를 앞에 붙인다 
# / 를 마지막에 붙이는 것을 잊지 말아야 한다
# 그렇지 않으면 DirectoryA 라는 이름의 디렉토리 뿐만 아니라 파일들까지 ignore 처리하게 된다
**/DirectoryA/
# 이 규칙은 다음 경로들을 ignore 처리할 것이다:
# DirectoryA/
# DirectoryB/DirectoryA/
# DirectoryC/DirectoryB/DirectoryA/
# 이 규칙은 DirectoryA 라는 이름의 파일을 ignore 처리하지는 않는다 (해당 파일이 어느 위치에 존재하든 무관)

# DirectoryA 라는 이름의 디렉토리 하부에 존재하는 DirectoryB 디렉토리를 ignore 처리하되
# 두 디렉토리 사이에 몇 단계의 다른 경로가 포함되어도 상관없이 ignore 하고 싶다면, 
# 두 디렉토리 경로 사이에 ** 문자열을 포함시켜 규칙을 작성합니다.
DirectoryA/**/DirectoryB/
# 일례로, 위의 규칙은 다음 경로들을 ignore 합니다.
# DirectoryA/DirectoryB/
# DirectoryA/DirectoryQ/DirectoryB/
# DirectoryA/DirectoryQ/DirectoryW/DirectoryB/

# 특정 파일들을 한꺼번에 ignore 하기 위해 와일드카드를 쓸수 있습니다. 
# 그런데, 만약 '*' 를 쓰게되면, 
# .gitignore 파일까지 포함하여 폴더 내의 모든 파일들이 <의도치 않게> ignore 됩니다.
# 이를 방지하려면 ! 를 이용하여 예외 처리합니다.
!.gitignore

# 파일 이름 중에 해시(#) 문자가 존재할 경우, 백슬래시를 escape 문자로 이용하여 표기할 수 있습니다.
# (1.6.2.1 버전 이후부터 지원합니다.)
\#*#
