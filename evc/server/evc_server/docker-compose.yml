#-----------------------------------------
#                 실행 방법
#-----------------------------------------
#
# 1. 홈 위치에 .evc 폴더를 만듭니다. 
#    mkdir ~/.evc
#
# 2. 도커 컴포즈를 실행합니다.
#    docker compose up
#
#-----------------------------------------

# JPark @ KETI, 2024
services:
    php:
        build:
            context: ./config/php
        ports:
            - 9000:9000
        volumes:
            - ./web:/var/www/html
            - ./config/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
        command: bash -c "docker-php-ext-install pdo pdo_mysql && docker-php-entrypoint php-fpm" # 동적으로 확장모듈 설치
        environment:
            MYSQL_USER: ${DB_USER}
            MYSQL_PASSWORD: ${DB_USER_PASSWORD}
        depends_on:
            - mariadb
        networks:
            - dev_network
 
    nginx:
        image: nginx
        ports:
            - 81:80
        volumes:
            - ./web:/var/www/html
            - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - php
        networks:
            - dev_network
        user: "$UID:$GID"
 
    pma:
        image: phpmyadmin/phpmyadmin
        environment:
            PMA_HOST: mariadb
            PMA_PORT: 3306
            MYSQL_ROOT_PASSWORD: "${DB_USER_PASSWORD}"
        ports:
            #- ${IP}:8000:80 # 보안 강력 (실제 서비스에 적용)
            - 8000:80 # 임시
        networks:
            - dev_network

    mariadb:
        image: mysql:latest    
        ports:
            #- ${IP}:3300:3306 # 보안 강력 (실제 서비스에 적용) 
            - 3306:3306 # 임시로 '${IP}:' 헤더를 제거
        command: "mysqld --init-file /data/application/init.sql"
        volumes:
            - ~/.evc/mariadb:/var/lib/mysql # maridadb data
            - ./data/mariadb/init.sql:/data/application/init.sql
        environment:
            MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASSWORD}"
            MYSQL_DATABASE: "${DB_NAME}"
            MYSQL_USER: "${DB_USER}"
            MYSQL_PASSWORD: "${DB_USER_PASSWORD}"
            TZ: Asia/Seoul
        networks:
            - dev_network
        user: "$UID:$GID"
            
    grafana:
        image: grafana/grafana-oss:latest
        container_name: grafana
        user: "${UID}:${GID}"  # 현재 사용자의 UID와 GID로 설정
        #restart: unless-stopped
        restart: always
        ports:
            - '3000:3000'
        volumes:
            - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
            - ./config/grafana/provisioning/:/etc/grafana/provisioning/
            #- ./config/grafana/defaults.ini:/usr/share/grafana/conf/defaults.ini
            - ~/.evc/grafana:/var/lib/grafana
        environment:            
            - GF_SERVER_ROOT_URL=http://evc.re.kr:23000
            - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_SECURITY_ALLOW_EMBEDDING=true
            - GF_SECURITY_LOGIN_REMEMBER_DAYS=365
            - GF_DEFAULT_APP_MODE=development
            - GF_ENABLE_GZIP=true
            - GF_SERVER_SERVE_FROM_SUB_PATH=true
            - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-worldmap-panel,marcusolsson-csv-datasource,frser-sqlite-datasource,grafana-simple-json-datasource,innius-video-panel,jdbranham-diagram-panel,volkovlabs-image-panel,redis-app,redis-datasource,redis-explorer-app
            #- GF_RENDERING_SERVER_URL=http://renderer:8081/render
            #- GF_RENDERING_CALLBACK_URL=http://grafana:3000/
            #- GF_LOG_FILTERS=rendering:debug
        expose:
            - 3000
        networks:
            - dev_network
            
  
    ## Grafana Image Renderer
    #renderer:
    #    image: grafana/grafana-image-renderer:latest
    #    ports:
    #        - 8081
    #    networks:
    #        - dev_network
      
    node-exporter:
        image: prom/node-exporter:latest
        container_name: node-exporter
        restart: unless-stopped
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        ports:
            - 9100:9100
        networks:
            - dev_network


    #prometheus:
    #    image: prom/prometheus
    #    container_name: prometheus
    #    volumes:
    #        - ./config/prometheus:/etc/prometheus
    #        - ~/.evc/prometheus:/prometheus
    #        #- ~/.evc/prometheus/targets.json:/etc/prometheus/targets.json

    #    ports:
    #        - 9090:9090 # 접근 포트 설정 (컨테이너 외부:컨테이너 내부)
    #    command: # web.enalbe-lifecycle은 api 재시작없이 설정파일들을 reload 할 수 있게 해줌
    #        - '--web.enable-lifecycle'
    #        - '--config.file=/etc/prometheus/prometheus.yml'
    #        - '--storage.tsdb.path=/prometheus'
    #        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
    #        - '--web.console.templates=/usr/share/prometheus/consoles'
    #    restart: always
    #    networks:
    #        - dev_network
    #    #user: "$UID:$GID"
    #    user: "1000:1000"

           
    # (참고) redis 기초 명령어 : https://tgyun615.com/192
    redis:
        image: redislabs/redisai
        container_name: redisai
        #environment:
        #    - REDIS_PASSWORD=
        #command: redis-server --requirepass $REDIS_PASSWORD
        ports:
            - 6379:6379
        volumes:
            - ~/.evc/redis/data:/data
        restart: always
        networks:
            - dev_network
        env_file:
            - .env

    redis-commander:
        container_name: redis-commander
        hostname: redis-commander
        image: rediscommander/redis-commander:latest
        restart: always
        environment:
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            #- REDIS_PASSWORD=$REDIS_PASSWORD
            - HTTP_USER=temp
            - HTTP_PASSWORD=temp
        ports:
            - 8091:8081
        networks:
            - dev_network
        env_file:
            - .env
      
    # 실험적 : 
    redisearch:
        image: redislabs/redisearch
        container_name: redisearch
        ports:
            - 6380:6379
        volumes:
            - ~/.evc/redisearch/data:/data
        restart: always
        networks:
            - dev_network
        env_file:
            - .env

    #semaphore:
    #    ports:
    #        - 8009:3000
    #    image: semaphoreui/semaphore:latest
    #    environment:
    #        SEMAPHORE_DB_DIALECT: bolt
    #        SEMAPHORE_ADMIN_PASSWORD: admin
    #        SEMAPHORE_ADMIN_NAME: admin
    #        SEMAPHORE_ADMIN_EMAIL: admin@localhost
    #        SEMAPHORE_ADMIN: admin
    #    networks:
    #        - dev_network


    # [주의] 빌드 하는데  시간이 많이 걸림
    # infer01:
    #    build: web/gradio
    #    ports:
    #        - 7860:7860
      
      
    #gitlab:
    #    image: 'gitlab/gitlab-ce:latest'
    #    container_name: gitlab
    #    restart: always
    #    hostname: 'evc.re.kr'
    #    environment:
    #      GITLAB_OMNIBUS_CONFIG: |
    #        external_url 'http://evc.re.kr'
    #        gitlab_rails['gitlab_shell_ssh_port'] = 8022
    #        gitlab_rails['initial_root_password'] = 'AdminAdmin!'
    #      # Add any other gitlab.rb configuration here, each on its own line
    #      TZ: 'Asia/Seoul'
    #    ports:
    #      - '82:80'
    #      - '443:443'
    #      - '8022:22' 
    #    volumes:
    #      - './config:/etc/gitlab'
    #      - './logs:/var/log/gitlab'
    #      - './data:/var/opt/gitlab'
    #    shm_size: '256m'
    #    networks:
    #      - dev_network

    #influxdb:
    #    image: influxdb:latest
    #    env_file:
    #        -  ./config/influxdb/influxv2.env
    #    volumes:
    #        - ~/.evc/influxdb:/var/lib/influxdb2:rw # Mount for influxdb data directory and configuration
    #    restart: always
    #    environment:
    #        - DOCKER_INFLUXDB_INIT_MODE=setup
    #        - DOCKER_INFLUXDB_INIT_USERNAME=admin
    #        - DOCKER_INFLUXDB_INIT_PASSWORD=admin
    #    ports:
    #        - 8086:8086
    #    networks:
    #        - dev_network
  
    #telegraf:
    #    image: telegraf:latest
    #    depends_on:
    #        - influxdb
    #    volumes:
    #        # Mount for telegraf config
    #        - ./config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    #    env_file:
    #        - ./config/influxdb/influxv2.env
    #    networks:
    #        - dev_network
    
    
    # 그라파나 엔터프라이즈 에디션과 연동됨
    #mongodb:
    #    image: mongo
    #    container_name: mongodb
    #    restart: always
    #    ports:
    #        - 27017:27017
    #    volumes:
    #        - ./mongodb:/data/db
    #    environment:
    #        - MONGO_INITDB_ROOT_USERNAME=root
    #        - MONGO_INITDB_ROOT_PASSWORD=1234 
    #        - MONGO_INITDB_DATABASE=mydb  
    #    networks:
    #        - dev_network
    
    #kroki:
    #    image: yuzutech/kroki
    #    ports:
    #        - 8010:8000        
    #      
    #    environment:
    #        - KROKI_BLOCKDIAG_HOST=blockdiag
    #        - KROKI_MERMAID_HOST=mermaid
    #        - KROKI_BPMN_HOST=bpmn
    #    depends_on:
    #        - blockdiag
    #        - mermaid
    #        - bpmn
    #    networks:
    #        - dev_network

    #blockdiag:
    #    image: yuzutech/kroki-blockdiag

    #mermaid:
    #    image: yuzutech/kroki-mermaid

    #bpmn:
    #    image: yuzutech/kroki-bpmn


networks:
    dev_network:
        driver: bridge




